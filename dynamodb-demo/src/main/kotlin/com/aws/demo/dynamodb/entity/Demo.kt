package com.aws.demo.dynamodb.entity

import software.amazon.awssdk.enhanced.dynamodb.AttributeConverter
import software.amazon.awssdk.enhanced.dynamodb.AttributeValueType
import software.amazon.awssdk.enhanced.dynamodb.EnhancedType
import software.amazon.awssdk.enhanced.dynamodb.extensions.annotations.*
import software.amazon.awssdk.enhanced.dynamodb.mapper.UpdateBehavior
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.*
import software.amazon.awssdk.services.dynamodb.model.AttributeValue
import java.time.Instant

// PK -> SK, SK -> DATE 순서로 조회방식을 많이 사용함
@DynamoDbBean
class DemoEntity(
    @get:DynamoDbPartitionKey
    var pk: String, // DEMO#{demoId}
    @get:DynamoDbSortKey // 기본 SK
    @get:DynamoDbSecondaryPartitionKey(indexNames = ["demo_gsi"])
    var sk: String, // DEMO#{demoId}
    @get:DynamoDbAutoGeneratedTimestampAttribute // write 될때마다 timestamp
    @get:DynamoDbSecondarySortKey(indexNames = ["demo_gsi", "date_index"]) // gsi 의 sort key
    val updateTimestamp: Instant,
    @get:DynamoDbAttribute("attrKey") // dynamodb 속성명 지정
    val internalKey: String,
    @get:DynamoDbIgnore // 속성 무시
    val ignoreKey: String,
    @get:DynamoDbFlatten // 중첩클래스 평탄화
    val flatten: DemoFlatten,
    @get:DynamoDbConvertedBy(UpperNameConverter::class) // converter 클래스 지정
    val name: String,
    @get:DynamoDbVersionAttribute // 항목 버전 번호, 낙관적 잠금 지원
    val version: Long,
    @get:DynamoDbAtomicCounter(startValue = 0, delta = 1) // write 마다 1씩 증가
    val updateCounter: Long,
    @get:DynamoDbUpdateBehavior(UpdateBehavior.WRITE_ALWAYS)
    val updated: Instant,
    @get:DynamoDbUpdateBehavior(UpdateBehavior.WRITE_IF_NOT_EXISTS)
    val created: Instant,
) {

}

@DynamoDbBean
class DemoFlatten(
    val value1: String,
    val value2: String,
    val value3: String,
)

// 어플리케이션에선 lower 를 사용해야하지만,
// dynamodb 에는 upper 로 저장되어야 할 경우
class UpperNameConverter() : AttributeConverter<String> {
    // 어플리케이션에서 dynamodb 로 데이터 내보내기
    override fun transformFrom(input: String): AttributeValue {
        return AttributeValue.fromS(input.uppercase())
    }

    // dynamodb 에서 어플리케이션으로 데이터 가져오기
    override fun transformTo(input: AttributeValue): String {
        return input.s().lowercase()
    }

    // 어플리케이션 코드로 변환될 데이터의 타입
    override fun type(): EnhancedType<String> {
        return EnhancedType.of(String::class.java)
    }

    // dynamodb 에 변환되어 저장될 데이터의 타입
    override fun attributeValueType(): AttributeValueType {
        return AttributeValueType.S
    }
}